;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name html5-canvas-backgrounds.mosaic, :imports nil, :requires {utils html5-canvas-backgrounds.utils, html5-canvas-backgrounds.utils html5-canvas-backgrounds.utils}, :uses nil, :defs {defaults {:name html5-canvas-backgrounds.mosaic/defaults, :file "src/cljs/html5_canvas_backgrounds/mosaic.cljs", :line 4, :column 1, :end-line 4, :end-column 14, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/mosaic.cljs", :line 4, :column 6, :end-line 4, :end-column 14}}, fill {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/mosaic.cljs", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([pos colors]))}, :name html5-canvas-backgrounds.mosaic/fill, :variadic false, :file "src/cljs/html5_canvas_backgrounds/mosaic.cljs", :end-column 11, :method-params ([pos colors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pos colors]))}, left-pos {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/mosaic.cljs", :line 16, :column 7, :end-line 16, :end-column 15, :arglists (quote ([row col width]))}, :name html5-canvas-backgrounds.mosaic/left-pos, :variadic false, :file "src/cljs/html5_canvas_backgrounds/mosaic.cljs", :end-column 15, :method-params ([row col width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([row col width]))}, build-triangle {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/mosaic.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([row col pos width height colors]))}, :name html5-canvas-backgrounds.mosaic/build-triangle, :variadic false, :file "src/cljs/html5_canvas_backgrounds/mosaic.cljs", :end-column 21, :method-params ([row col pos width height colors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 6, :fn-var true, :arglists (quote ([row col pos width height colors]))}, build-pattern {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/mosaic.cljs", :line 31, :column 7, :end-line 31, :end-column 20, :arglists (quote ([width height colors canvas] [width height colors canvas triangles counter])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([width height colors canvas] [width height colors canvas triangles counter]), :arglists ([width height colors canvas] [width height colors canvas triangles counter]), :arglists-meta (nil nil)}}, :name html5-canvas-backgrounds.mosaic/build-pattern, :variadic false, :file "src/cljs/html5_canvas_backgrounds/mosaic.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([width height colors canvas] [width height colors canvas triangles counter]), :arglists ([width height colors canvas] [width height colors canvas triangles counter]), :arglists-meta (nil nil)}, :method-params ([width height colors canvas] [width height colors canvas triangles counter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 6, :fn-var true, :arglists ([width height colors canvas] [width height colors canvas triangles counter])}, draw {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/mosaic.cljs", :line 45, :column 16, :end-line 45, :end-column 20, :export true, :arglists (quote ([opts]))}, :name html5-canvas-backgrounds.mosaic/draw, :variadic false, :file "src/cljs/html5_canvas_backgrounds/mosaic.cljs", :end-column 20, :method-params ([opts]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:flipY :top :fill :width :colors :col :id :keywordize-keys :height :row :left}, :order [:width :height :colors :top :left :flipY :fill :row :col :keywordize-keys :id]}, :doc nil}