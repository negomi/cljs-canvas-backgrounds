;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name html5-canvas-backgrounds.utils, :imports nil, :requires {cljsjs.fabric cljsjs.fabric}, :uses nil, :defs {height-in-units {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 33, :column 7, :end-line 33, :end-column 22, :arglists (quote ([canvas unit-size])), :doc "Calculate number of vertical units in a canvas."}, :name html5-canvas-backgrounds.utils/height-in-units, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 22, :method-params ([canvas unit-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas unit-size])), :doc "Calculate number of vertical units in a canvas."}, set-background-color! {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 70, :column 7, :end-line 70, :end-column 28, :arglists (quote ([canvas color])), :doc "Set canvas background color."}, :name html5-canvas-backgrounds.utils/set-background-color!, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 28, :method-params ([canvas color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas color])), :doc "Set canvas background color."}, add-to-canvas! {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 75, :column 7, :end-line 75, :end-column 21, :arglists (quote ([canvas content])), :doc "Add shape(s) to canvas."}, :name html5-canvas-backgrounds.utils/add-to-canvas!, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 21, :method-params ([canvas content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas content])), :doc "Add shape(s) to canvas."}, width-in-units {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 38, :column 7, :end-line 38, :end-column 21, :arglists (quote ([canvas unit-size])), :doc "Calculate number of horizontal units in a canvas."}, :name html5-canvas-backgrounds.utils/width-in-units, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 21, :method-params ([canvas unit-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas unit-size])), :doc "Calculate number of horizontal units in a canvas."}, linear-easing {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 4, :column 7, :end-line 4, :end-column 20, :arglists (quote ([t b c d])), :doc "Linear easing function."}, :name html5-canvas-backgrounds.utils/linear-easing, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 20, :method-params ([t b c d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 4, :fn-var true, :arglists (quote ([t b c d])), :doc "Linear easing function."}, total-units {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([canvas unit-size] [canvas width height])), :doc "Calculate total units in a canvas area.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([canvas unit-size] [canvas width height]), :arglists ([canvas unit-size] [canvas width height]), :arglists-meta (nil nil)}}, :name html5-canvas-backgrounds.utils/total-units, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([canvas unit-size] [canvas width height]), :arglists ([canvas unit-size] [canvas width height]), :arglists-meta (nil nil)}, :method-params ([canvas unit-size] [canvas width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists ([canvas unit-size] [canvas width height]), :doc "Calculate total units in a canvas area."}, render-all! {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([canvas])), :doc "Force render after change to canvas."}, :name html5-canvas-backgrounds.utils/render-all!, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 18, :method-params ([canvas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([canvas])), :doc "Force render after change to canvas."}, coords {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 50, :column 7, :end-line 50, :end-column 13, :arglists (quote ([width index])), :doc "Calculate coordinates of a given unit."}, :name html5-canvas-backgrounds.utils/coords, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 13, :method-params ([width index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width index])), :doc "Calculate coordinates of a given unit."}, new-group {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([content])), :doc "Create new group from a vector."}, :name html5-canvas-backgrounds.utils/new-group, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 16, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Create new group from a vector."}, new-shape {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([shape opts & [coords]])), :doc "Create new shape.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(shape opts [coords])], :arglists ([shape opts & [coords]]), :arglists-meta (nil)}}, :name html5-canvas-backgrounds.utils/new-shape, :variadic true, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(shape opts [coords])], :arglists ([shape opts & [coords]]), :arglists-meta (nil)}, :method-params [(shape opts [coords])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists ([shape opts & [coords]]), :doc "Create new shape."}, animate-shape! {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 60, :column 7, :end-line 60, :end-column 21, :arglists (quote ([shape props opts])), :doc "Animate a given shape."}, :name html5-canvas-backgrounds.utils/animate-shape!, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 21, :method-params ([shape props opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shape props opts])), :doc "Animate a given shape."}, remove-from-canvas! {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 80, :column 7, :end-line 80, :end-column 26, :arglists (quote ([canvas content])), :doc "Remove shape(s) from canvas."}, :name html5-canvas-backgrounds.utils/remove-from-canvas!, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 26, :method-params ([canvas content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([canvas content])), :doc "Remove shape(s) from canvas."}, rand-range {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 9, :column 7, :end-line 9, :end-column 17, :arglists (quote ([min max])), :doc "Return a random integer within a given range."}, :name html5-canvas-backgrounds.utils/rand-range, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 17, :method-params ([min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([min max])), :doc "Return a random integer within a given range."}, new-canvas {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([id])), :doc "Create new canvas."}, :name html5-canvas-backgrounds.utils/new-canvas, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 17, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Create new canvas."}, set-gradient! {:protocol-inline nil, :meta {:file "/Users/imogen/code/html5-canvas-backgrounds/src/cljs/html5_canvas_backgrounds/utils.cljs", :line 55, :column 7, :end-line 55, :end-column 20, :arglists (quote ([shape type opts])), :doc "Set gradient for a given shape."}, :name html5-canvas-backgrounds.utils/set-gradient!, :variadic false, :file "src/cljs/html5_canvas_backgrounds/utils.cljs", :end-column 20, :method-params ([shape type opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 3, :fn-var true, :arglists (quote ([shape type opts])), :doc "Set gradient for a given shape."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:col :row}, :order [:row :col]}, :doc nil}